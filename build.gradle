buildscript {
	repositories {
		mavenLocal()
		jcenter()
		mavenCentral()
		maven { url "https://files.minecraftforge.net/maven" }
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
		classpath group: 'com.gamebuster19901', name: 'Sparkle', version: '1.0.1.0', changing: true
		classpath group: 'com.gamebuster19901', name: 'LicenseChecker', version: '1.0.0.0', changing: true
	}
}

plugins {
	id 'eclipse'
	id 'maven-publish' 
}


import com.gamebuster19901.license.LicenseChecker;
import com.gamebuster19901.sparkle.GradleGitDependency;

load()


public void load() {
	
	GradleGitDependency licenseChecker = new GradleGitDependency("https://gamebuster19901.com/LicenseChecker", "master", "com.gamebuster19901:LicenseChecker:*")
	GradleGitDependency gunCore = new GradleGitDependency("https://gamebuster19901.com/GunCore", "1.14.4", "com.gamebuster19901:guncore:*")
	
	System.out.println(licenseChecker.getGroup());
	System.out.println(licenseChecker.getName());
	System.out.println(licenseChecker.getVersion());
	
	for(GradleGitDependency dep : GradleGitDependency.gitDependencies) {
		System.out.println(dep.getModule())
	}
	
	apply plugin: 'net.minecraftforge.gradle'
	apply plugin: 'com.gamebuster19901.sparkle'
}

version = "0.0.0.0-1.14.4"
group = "com.gamebuster19901"
archivesBaseName = "oni"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
	sourceCompatibility = targetCompatibility = '1.8'
}

repositories {
	mavenLocal()
}

minecraft {
	mappings channel: gradle.ext.mappingChannel, version: gradle.ext.mappingVersion
	// makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
	
	accessTransformer = file('src/main/resources/main/META-INF/accesstransformer.cfg')

	runs {
		client {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			property 'forge.logging.console.level', 'debug'

			mods {
				oni {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			property 'forge.logging.console.level', 'debug'

			mods {
				oni {
					source sourceSets.main
				}
			}
		}
	}
}

dependencies {
	minecraft "net.minecraftforge:forge:1.14.4-28.0.104"
	//compileOnly(new GradleGitDependency("com.gamebuster19901:LicenseChecker:*"));
	implementation fg.deobf("com.gamebuster19901:GunCore:1.4.0.1-1.14.4");
}

jar {
	manifest {
		attributes([
			"Specification-Title": "oni",
			"Specification-Vendor": "examplemodsareus",
			"Specification-Version": "1", // We are version 1 of ourselves
			"Implementation-Title": project.name,
			"Implementation-Version": "${version}",
			"Implementation-Vendor" :"examplemodsareus",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

task checkLicenses(type: JavaExec) {
	classpath += sourceSets.main.runtimeClasspath
	classpath += configurations.compileClasspath
	classpath += buildscript.configurations.classpath
	println main = "com.gamebuster19901.license.LicenseChecker"
	args = ['notBinary', 'silenceSkips', "classes:com.gamebuster19901.license.test.Test"]
}
build.dependsOn ':checkLicenses'

task applyLicenses(type: JavaExec) {
	classpath += sourceSets.main.runtimeClasspath
	classpath += configurations.compileClasspath
	classpath += buildscript.configurations.classpath
	println main = "com.gamebuster19901.license.LicenseChecker"
	args = ['notBinary', 'applyLicenses']
}

task editLicenses(type:JavaExec) {
	classpath += sourceSets.main.runtimeClasspath
	classpath += configurations.compileClasspath
	classpath += buildscript.configurations.classpath
	standardInput = System.in
	println main = "com.gamebuster19901.license.create.CreateChecker"
	args = ['notBinary', 'applyLicenses']
}

task stripLicenses(type:JavaExec){
	classpath += sourceSets.main.runtimeClasspath
	classpath += configurations.compileClasspath
	classpath += buildscript.configurations.classpath
	standardInput = System.in
	println main = "com.gamebuster19901.license.LicenseChecker"
	args = ['notBinary', 'stripLicenses']
}

build.finalizedBy publish

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
	type 'jar'
	builtBy 'reobfJar'
}
publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact reobfArtifact
		}
	}
	repositories {
		mavenLocal()
	}
}